<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on The Portal of Knowledge</title>
    <link>https://alamot.github.io/categories/coding/</link>
    <description>Recent content in Coding on The Portal of Knowledge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://alamot.github.io/categories/coding/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ask and you shall receive</title>
      <link>https://alamot.github.io/oracle/</link>
      <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alamot.github.io/oracle/</guid>
      <description>#copybutton { display: inline-block; margin: 10px; } #input { display: block; } #result { background-color: yellow; border: 1px solid black; display: none; padding: 10px; word-break: break-all; white-space: normal; }    Copy result to clipboard 
    $(function () { var functions = {}; functions[&#34;Base64 encoding&#34;] = function (input) { return btoa(input); } functions[&#34;Base64 decoding&#34;] = function (input) { return atob(input); } functions[&#34;Binary encoding&#34;] = function (input) { output = &#34;</description>
    </item>
    
    <item>
      <title>MSSQL shell with file upload capability</title>
      <link>https://alamot.github.io/mssql_shell/</link>
      <pubDate>Fri, 13 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alamot.github.io/mssql_shell/</guid>
      <description>Sometimes we can get access to a Microsoft SQL server in which the execution of the xp_cmdshell stored procedure is allowed but other kind of traffic (TCP, UDP, ICMP et.c.) is blocked by some kind of firewall. This can make the acquisition of a shell more difficult. In such cases, it would be useful to have a kind of shell via multiple xp_cmdshell commands. One problem with that approach is that every xp_cmdshell command will be executed in a new context.</description>
    </item>
    
    <item>
      <title>WinRM shell (a.k.a. PowerShell Remoting) with file upload capability</title>
      <link>https://alamot.github.io/winrm_shell/</link>
      <pubDate>Mon, 09 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://alamot.github.io/winrm_shell/</guid>
      <description>According to Microsoft, PowerShell Remoting is the recommended way to manage Windows systems. PowerShell Remoting uses Windows Remote Management (WinRM), which is the Microsoft implementation of the Web Services for Management (WS-Management) protocol, to allow users to run PowerShell commands on remote computers. But can we make use of it (i.e. connect) from a Linux machine?
Σύμφωνα με την Microsoft, το PowerShell Remoting είναι ο ενδεδειγμένος τρόπος για την απομακρυσμένη διαχείριση Windows συστημάτων.</description>
    </item>
    
    <item>
      <title>How to determine the character encoding of a text file</title>
      <link>https://alamot.github.io/test_encodings/</link>
      <pubDate>Fri, 21 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://alamot.github.io/test_encodings/</guid>
      <description>IntroductionΕισαγωγή If you have ever encountered a text file with gibberish characters, then you know that -many times- it is quite difficult to determine its correct character encoding.
Αν έχετε βρεθεί ποτέ αντιμέτωποι με ένα αρχείο κειμένου που περιέχει ακαταλαβίστικους χαρακτήρες, τότε γνωρίζετε ότι -πολλές φορές- είναι αρκετά δύσκολο να αναγνωρίσετε ποια είναι η σωστή κωδικοποίηση των χαρακτήρων.
There is an automatic universal encoding detector for Python 2 and 3 here: https://pypi.</description>
    </item>
    
    <item>
      <title>Git &amp; Mercurial: How to commit-push fast and easily</title>
      <link>https://alamot.github.io/fast_commit_push/</link>
      <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://alamot.github.io/fast_commit_push/</guid>
      <description>Git and Mercurial are distributed revision-control tools for software development and other version control tasks. We present two bash scripts, one for each tool, to help us commit and push our changes fast and easily.
Το Git και το Mercurial είναι εργαλεία κατανεμημένου ελέγχου-αναθεώρησης για ανάπτυξη λογισμικού και άλλες εργασίες ελέγχου έκδοσης. Παρουσιάζουμε δύο σενάρια bash, ένα για κάθε εργαλείο, που μας βοηθάνε να κάνουμε commit και push τις αλλαγές μας γρήγορα και εύκολα.</description>
    </item>
    
    <item>
      <title>How to get info for the wireless interface using nl80211 in C</title>
      <link>https://alamot.github.io/nl80211/</link>
      <pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://alamot.github.io/nl80211/</guid>
      <description>nl80211 The nl80211 is the 802.11 netlink-based userspace interface for the new cfg80211 configuration system for wireless hardware. Together they are intended to replace the old Wireless-Extensions. Current users of nl80211 include:
H nl80211 είναι η διεπαφή χρήστη (βασισμένη στο netlink 802.11) για το νέο σύστημα διαρρύθμισης cfg80211 του ασύρματου υλικού. Μαζί προορίζονται να αντικαταστήσουν τα παλιά Wireless-Extensions. Το nl80211 χρησιμοποιείται μεταξύ αλλων από τα:
 iw crda hostapd wpa_supplicant (-Dnl80211)  Includes First of all, let&#39;s add the necessary includes:</description>
    </item>
    
    <item>
      <title>Creation of a transparent shutdown GUI using Gtk and Cairo in Python</title>
      <link>https://alamot.github.io/shutdown_manager_transparent/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://alamot.github.io/shutdown_manager_transparent/</guid>
      <description>Many window managers in Linux are lacking a graphical «shutdown» interface. In our previous article, we showed how we can implement one, quite easily, using GTK and Python. Now, we will show how to make it transparent using Cairo.
Πολλοί διαχειριστές παραθύρων στο Linux δε διαθέτουν μια γραφική διεπαφή «κλεισίματος». Σε προηγούμενο άρθρο μας, δείξαμε πώς μπορείτε να υλοποιήσετε μία, αρκετά εύκολα, χρησιμοποιώντας GTK και Python. Τώρα, θα δείξουμε πως μπορείτε να την κάνετε διάφανη χρησιμοποιώντας Cairo.</description>
    </item>
    
    <item>
      <title>Creation of a shutdown GUI using Gtk in Python</title>
      <link>https://alamot.github.io/shutdown_manager_plain/</link>
      <pubDate>Thu, 21 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://alamot.github.io/shutdown_manager_plain/</guid>
      <description>Many window managers in Linux are lacking a graphical «shutdown» interface. Here, we show how we can implement one, quite easily, using gtk and python. In a follow-up article, we show how we can create a transparent GUI using Cairo.
Πολλοί διαχειριστές παραθύρων στο Linux δε διαθέτουν μια γραφική διεπαφή «κλεισίματος». Εδώ, θα δείξουμε πώς μπορείτε να υλοποιήσετε μία, αρκετά εύκολα, χρησιμοποιώντας gtk και python. Σε επόμενο άρθρο μας, δείχνουμε πώς μπορείτε να δημιουργήσετε μια διάφανη διεπαφή χρήστη χρησιμοποιώντας Cairo.</description>
    </item>
    
    <item>
      <title>How to build a responsive popup window with scrolling capability in Kivy</title>
      <link>https://alamot.github.io/kivy_popup/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://alamot.github.io/kivy_popup/</guid>
      <description>Kivy is a cross-platform Python framework for rapid development of applications that make use of innovative user interfaces, such as multi-touch etc. In this article, we show how to build a responsive popup window with scrolling capability.
To Kivy είναι ένα cross-platform Python για γρήγορη ανάπτυξη εφαρμογών σε πολλές διαφορετικές πλατφόρμες που χρησιμοποιεί πρωτοποριακές διεπαφές χρήστη, όπως πολλαπλή αφή κλπ. Σε αυτό το άρθρο, δείχνουμε πως φτιάχνεται ένα ευέλικτο αναδυόμενο παράθυρο με δυνατότητα κύλισης.</description>
    </item>
    
  </channel>
</rss>