<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Portal of Knowledge</title>
    <link>https://alamot.github.io/tags/c/index.xml</link>
    <description>Recent content on The Portal of Knowledge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alamot.github.io/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to get info for the wireless interface using nl80211 in C</title>
      <link>https://alamot.github.io/nl80211/</link>
      <pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate>
      <guid>https://alamot.github.io/nl80211/</guid>
      <description>

&lt;h1 id=&#34;nl80211&#34;&gt;nl80211&lt;/h1&gt;

&lt;p lang=&#34;en&#34;&gt;The nl80211 is the 802.11 netlink-based userspace interface for the new cfg80211 configuration system for wireless hardware. Together they are intended to replace the old Wireless-Extensions. Current users of nl80211 include:&lt;/p&gt;
&lt;p lang=&#34;el&#34;&gt;H nl80211 είναι η διεπαφή χρήστη (βασισμένη στο netlink 802.11) για το νέο cfg80211 σύστημα διαρρύθμισης του ασύρματου υλικού. Μαζί προορίζονται να αντικαταστήσουν τα παλιά Wireless-Extensions. Το nl80211 χρησιμοποιείται μεταξύ αλλων από τα:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iw&lt;/li&gt;
&lt;li&gt;crda&lt;/li&gt;
&lt;li&gt;hostapd&lt;/li&gt;
&lt;li&gt;wpa_supplicant (-Dnl80211)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;includes&#34;&gt;Includes&lt;/h1&gt;

&lt;p lang=&#34;en&#34;&gt;First of all, let&#39;s add the necessary includes:&lt;/p&gt;
&lt;p lang=&#34;el&#34;&gt;Πρώτα από όλα, ας προσθέσουμε τα απαραίτητα includes:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;#define _XOPEN_SOURCE 700&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;errno.h&amp;gt;              &lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;netlink/netlink.h&amp;gt;    //lots of netlink functions&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;netlink/genl/genl.h&amp;gt;  //genl_connect, genlmsg_put&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;netlink/genl/family.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;netlink/genl/ctrl.h&amp;gt;  //genl_ctrl_resolve&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;linux/nl80211.h&amp;gt;      //NL80211 definitions&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;structs&#34;&gt;Structs&lt;/h1&gt;

&lt;p lang=&#34;en&#34;&gt;Let&#39;s define some data structures we will need later on:&lt;/p&gt;
&lt;p lang=&#34;el&#34;&gt;Ας ορίσουμε μερικέςς δομές δεδομένων που θα χρειαστούμε στη συνέχεια:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; {
  &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; id;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nl_sock&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; socket;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nl_cb&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; cb1,&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; cb2;
  &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; result1, result2;
} Netlink; 

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; {
  &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;char&lt;/span&gt; ifname[&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;];
  &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; ifindex;
  &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; signal;
  &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; txrate;
} Wifi;

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nla_policy stats_policy[NL80211_STA_INFO_MAX &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
  [NL80211_STA_INFO_INACTIVE_TIME] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { .type &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; NLA_U32 },
  [NL80211_STA_INFO_RX_BYTES] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { .type &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; NLA_U32 },
  [NL80211_STA_INFO_TX_BYTES] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { .type &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; NLA_U32 },
  [NL80211_STA_INFO_RX_PACKETS] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { .type &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; NLA_U32 },
  [NL80211_STA_INFO_TX_PACKETS] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { .type &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; NLA_U32 },
  [NL80211_STA_INFO_SIGNAL] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { .type &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; NLA_U8 },
  [NL80211_STA_INFO_TX_BITRATE] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { .type &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; NLA_NESTED },
  [NL80211_STA_INFO_LLID] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { .type &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; NLA_U16 },
  [NL80211_STA_INFO_PLID] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { .type &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; NLA_U16 },
  [NL80211_STA_INFO_PLINK_STATE] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { .type &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; NLA_U8 },
};

&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nla_policy rate_policy[NL80211_RATE_INFO_MAX &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
  [NL80211_RATE_INFO_BITRATE] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { .type &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; NLA_U16 },
  [NL80211_RATE_INFO_MCS] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { .type &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; NLA_U8 },
  [NL80211_RATE_INFO_40_MHZ_WIDTH] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { .type &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; NLA_FLAG },
  [NL80211_RATE_INFO_SHORT_GI] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { .type &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; NLA_FLAG },
};
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;functions&#34;&gt;Functions&lt;/h1&gt;

&lt;p lang=&#34;en&#34;&gt;We define our functions:&lt;/p&gt;
&lt;p lang=&#34;el&#34;&gt;Ορίζουμε τις συναρτήσεις μας:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;initNl80211&lt;/span&gt;(Netlink&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; nl, Wifi&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; w);
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;finish_handler&lt;/span&gt;(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nl_msg &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;msg, &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;arg);
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;getWifiName_callback&lt;/span&gt;(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nl_msg &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;msg, &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;arg);
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;getWifiInfo_callback&lt;/span&gt;(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nl_msg &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;msg, &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;arg);
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;getWifiStatus&lt;/span&gt;(Netlink&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; nl, Wifi&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; w);
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;initnl80211&#34;&gt;initNl80211()&lt;/h2&gt;

&lt;div lang=&#34;en&#34;&gt;
In our function initNl80211, we initialize our communication with the Κernel. We follow these steps:
&lt;ol&gt;
&lt;li&gt;We allocate a netlink socket (using nl_socket_alloc)&lt;/li&gt;
&lt;li&gt;Optionally, we can set the socket buffer size (using nl_socket_set_buffer_size)&lt;/li&gt;
&lt;li&gt;We connect to the generic netlink socket (using genl_connect)&lt;/li&gt;
&lt;li&gt;Ask Kernel to resolve family name &#34;nl80211&#34; to family id (using genl_ctrl_resolve)&lt;/li&gt;
&lt;li&gt;We allocate two new callback handles (using nl_cb_alloc)&lt;/li&gt;
&lt;li&gt;We set some callbacks (using nl_cb_set).&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div lang=&#34;el&#34;&gt;
Στην συνάρτηση μας initNl80211, αρχικοποιούμε την επικοινωνία μας με τον Πυρήνα. Aκολουθούμε τα παρακάτω βήματα:
&lt;ol&gt;
&lt;li&gt;Δεσμεύουμε ένα netlink socket (χρησιμοποιώντας την nl_socket_alloc)&lt;/li&gt;
&lt;li&gt;Προαιρετικά, μπορούμε να ορίσουμε το μέγεθος του socket buffer (χρησιμοποιώντας την nl_socket_set_buffer_size)&lt;/li&gt;
&lt;li&gt;Συνδεόμαστε στο γενικό netlink socket (χρησιμοποιώντας την genl_connect)&lt;/li&gt;
&lt;li&gt;Ζητάμε από τον Πυρήνα να μετατρέψει το όνομα της οικογένειας (family name) σε αναγνωριστικό οικογένειας (family id) (χρησιμοποιώντας την genl_ctrl_resolve)&lt;/li&gt;
&lt;li&gt;Δεσμεύουμε δύο νέες λαβές επανακλησης (callback handles) (χρησιμοποιώντας την nl_cb_alloc)&lt;/li&gt;
&lt;li&gt;Ορίζουμε μερικές επανακλήσεις (χρησιμοποιώντας την nl_cb_set).&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;initNl80211&lt;/span&gt;(Netlink&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; nl, Wifi&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; w) {
  nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;socket &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nl_socket_alloc();
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;socket) { 
    fprintf(stderr, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Failed to allocate netlink socket.&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;);
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;ENOMEM;
  }  

  nl_socket_set_buffer_size(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;socket, &lt;span style=&#34;color: #666666&#34;&gt;8192&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8192&lt;/span&gt;);

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (genl_connect(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;socket)) { 
    fprintf(stderr, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Failed to connect to netlink socket.&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;); 
    nl_close(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;socket);
    nl_socket_free(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;socket);
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;ENOLINK;
  }
   
  nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;id &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; genl_ctrl_resolve(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;socket, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;nl80211&amp;quot;&lt;/span&gt;);
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;id&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {
    fprintf(stderr, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Nl80211 interface not found.&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;);
    nl_close(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;socket);
    nl_socket_free(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;socket);
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;ENOENT;
  }

  nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;cb1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nl_cb_alloc(NL_CB_DEFAULT);
  nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;cb2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nl_cb_alloc(NL_CB_DEFAULT);
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;cb1) &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;cb2)) { 
     fprintf(stderr, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Failed to allocate netlink callback.&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;); 
     nl_close(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;socket);
     nl_socket_free(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;socket);
     &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; ENOMEM;
  }

  nl_cb_set(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;cb1, NL_CB_VALID , NL_CB_CUSTOM, getWifiName_callback, w);
  nl_cb_set(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;cb1, NL_CB_FINISH, NL_CB_CUSTOM, finish_handler, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;result1));
  nl_cb_set(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;cb2, NL_CB_VALID , NL_CB_CUSTOM, getWifiInfo_callback, w);
  nl_cb_set(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;cb2, NL_CB_FINISH, NL_CB_CUSTOM, finish_handler, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;result2));
  
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;id;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;finish-handler&#34;&gt;finish_handler()&lt;/h2&gt;

&lt;p lang=&#34;en&#34;&gt;This is our finish_handler.&lt;p&gt; 
&lt;p lang=&#34;el&#34;&gt;Αυτός είναι ο finish_handler μας.&lt;p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;finish_handler&lt;/span&gt;(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nl_msg &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;msg, &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;arg) {
  &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;ret &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; arg;
  &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;ret &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; NL_SKIP;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p lang=&#34;en&#34;&gt;The finish_handler will allow us -later on- to receive our messages from Kernel like that:&lt;/p&gt;
&lt;p lang=&#34;el&#34;&gt;O finish_handler μας επιτρέπει -στη συνέχεια- να λαμβάνουμε τα μηνύματά μας από τον Πυρήνα κάπως έτσι:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;while&lt;/span&gt; (nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;result1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) { nl_recvmsgs(nlsocket, nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;cb1); }
&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;while&lt;/span&gt; (nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;result2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) { nl_recvmsgs(nlsocket, nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;cb2); }
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;getwifiiface-callback&#34;&gt;getWifiIface_callback()&lt;/h2&gt;

&lt;p lang=&#34;en&#34;&gt;This is our getWifiIface_callback. Here we parse the message from the Kernel and we get the interface name (wifi_iface) and its index (wifi_index). If you would like, уou can use the nl_msg_dump(msg, stdout) to see the raw message.&lt;/p&gt;
&lt;p lang=&#34;el&#34;&gt;Αυτή είναι η getWifiIface_callback. Εδώ επεξεργαζόμαστε το μήνυμα από τον πυρήνα και λαμβάνουμε το όνομα της ασύρματης διεπαφής (wifi_iface) και τον δείκτη της (wifi_index). Αν θέλετε, μπορείτε να χρησιμοποιήσετε την nl_msg_dump(msg, stdout) για να δείτε το ακατέργαστο μήνυμα.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;getWifiName_callback&lt;/span&gt;(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nl_msg &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;msg, &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;arg) {
 
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; genlmsghdr &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;gnlh &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nlmsg_data(nlmsg_hdr(msg));

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nlattr &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;tb_msg[NL80211_ATTR_MAX &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;];

  &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;//nl_msg_dump(msg, stdout);&lt;/span&gt;

  nla_parse(tb_msg,
            NL80211_ATTR_MAX,
            genlmsg_attrdata(gnlh, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;),
            genlmsg_attrlen(gnlh, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;),
            &lt;span style=&#34;color: #AA22FF&#34;&gt;NULL&lt;/span&gt;);

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (tb_msg[NL80211_ATTR_IFNAME]) {
    strcpy(((Wifi&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)arg)&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;ifname, nla_get_string(tb_msg[NL80211_ATTR_IFNAME]));
  }

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (tb_msg[NL80211_ATTR_IFINDEX]) {
    ((Wifi&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)arg)&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;ifindex &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nla_get_u32(tb_msg[NL80211_ATTR_IFINDEX]);
  }

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; NL_SKIP;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;getwifiinfo-callback&#34;&gt;getWifiInfo_callback()&lt;/h2&gt;

&lt;p lang=&#34;en&#34;&gt;This is our getWifiInfo_callback. Here we parse the message from the Kernel and we get the wifi signal (wifi_signal) and txrate (wifi_bitrate). If you would like, уou can use the nl_msg_dump(msg, stdout) to see the raw message.&lt;/p&gt;
&lt;p lang=&#34;el&#34;&gt;Αυτή είναι η getWifiInfo_callback. Εδώ επεξεργαζόμαστε το μήνυμα από τον πυρήνα και λαμβάνουμε το σήμα της ασύρματης διεπαφής (wifi_signal) και τον ρυθμό μετάδοσης (wifi_bitrate). Αν θέλετε, μπορείτε να χρησιμοποιήσετε την nl_msg_dump(msg, stdout) για να δείτε το ακατέργαστο μήνυμα.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;getWifiInfo_callback&lt;/span&gt;(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nl_msg &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;msg, &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;arg) {
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nlattr &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;tb[NL80211_ATTR_MAX &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;];
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; genlmsghdr &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;gnlh &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nlmsg_data(nlmsg_hdr(msg));
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nlattr &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;sinfo[NL80211_STA_INFO_MAX &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;];
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nlattr &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;rinfo[NL80211_RATE_INFO_MAX &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;];
  
  &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;//nl_msg_dump(msg, stdout);&lt;/span&gt;

  nla_parse(tb,
            NL80211_ATTR_MAX,
            genlmsg_attrdata(gnlh, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;),
            genlmsg_attrlen(gnlh, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;),
            &lt;span style=&#34;color: #AA22FF&#34;&gt;NULL&lt;/span&gt;);

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;tb[NL80211_ATTR_STA_INFO]) {
    fprintf(stderr, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;sta stats missing!&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;); &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; NL_SKIP;
  }

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (nla_parse_nested(sinfo, NL80211_STA_INFO_MAX,
                       tb[NL80211_ATTR_STA_INFO], stats_policy)) {
    fprintf(stderr, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;failed to parse nested attributes!&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;); &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; NL_SKIP;
  }
  
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (sinfo[NL80211_STA_INFO_SIGNAL]) {
    ((Wifi&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)arg)&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;signal &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100+&lt;/span&gt;(&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int8_t&lt;/span&gt;)nla_get_u8(sinfo[NL80211_STA_INFO_SIGNAL]);
  }

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (sinfo[NL80211_STA_INFO_TX_BITRATE]) {  
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (nla_parse_nested(rinfo, NL80211_RATE_INFO_MAX,
                         sinfo[NL80211_STA_INFO_TX_BITRATE], rate_policy)) {
      fprintf(stderr, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;failed to parse nested rate attributes!&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;); } 
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (rinfo[NL80211_RATE_INFO_BITRATE]) {
        ((Wifi&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)arg)&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;txrate &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nla_get_u16(rinfo[NL80211_RATE_INFO_BITRATE]);
      } 
    }
  }
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; NL_SKIP;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;getwifistatus&#34;&gt;getWifiStatus()&lt;/h2&gt;

&lt;div lang=&#34;en&#34;&gt;
Let&#39;s see now what happens in our next function, getWifiStatus:
&lt;ol&gt;
&lt;li&gt;We allocate a netlink message structure (using nlmsg_alloc)&lt;/li&gt;
&lt;li&gt;We add generic netlink headers to the netlink message (using genlmsg_put)&lt;/li&gt;
&lt;li&gt;We finalize and transmit the netlink message (using nl_send_auto)&lt;/li&gt;
&lt;li&gt;We receive a set of messages from the netlink socket (using nl_recvmsgs)&lt;/li&gt;
&lt;li&gt;We release the netlink message reference (using nlmsg_free)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;p lang=&#34;en&#34;&gt;We execute those steps twice:&lt;/p&gt;

&lt;p lang=&#34;en&#34;&gt;a) The first time we use the NL80211_CMD_GET_INTERFACE command identifier to get the wireless interface name and index.&lt;/p&gt;

&lt;p lang=&#34;en&#34;&gt;b) The second time we use the NL80211_CMD_GET_STATION command identifier to get signal strength and transmit bitrate. The reason for it is that the signal and bitrate values have meaning only relative to a station. Note that we have to put in the message the interface index using the nla_put_u32(msg2, NL80211_ATTR_IFINDEX, w-&gt;ifindex). 
&lt;/p&gt;

&lt;div lang=&#34;el&#34;&gt;
Ας δούμε τώρα τι συμβαίνει σητν επόμενη συνάρτησή μας, την getWifiStatus:
&lt;ol&gt;
&lt;li&gt;Δευσμεύουμε μια δομή μηνύματος netlink (χρησιμοποιώντας την nlmsg_alloc)&lt;/li&gt;
&lt;li&gt;Προσθέτουμε γενικές netlink επικεφαλίδες στο μήνυμα netlink (χρησιμοποιώντας την genlmsg_put)&lt;/li&gt;
&lt;li&gt;Ολοκληρώνουμε και μεταδίδουμε το μήνυμα netlink (χρησιμοποιώντας την nl_send_auto)&lt;/li&gt;
&lt;li&gt;Λαμβάνουμε ένα σύνολο μηνυμάτων από το netlink socket (χρησιμοποιώντας την nl_recvmsgs)&lt;/li&gt;
&lt;li&gt;Απελευθερώνουμε την αναφορά του μηνύματος netlink (χρησιμοποιώντας την nlmsg_free)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;p lang=&#34;el&#34;&gt;Εκτελούμε τα ανωτέρο βήματα δύο φορές:&lt;/p&gt;
&lt;p lang=&#34;el&#34;&gt; α) Την πρώτη φορά χρησιμοποιούμε το αναγνωριστικό εντολής NL80211_CMD_GET_INTERFACE για να λάβουμε το όνομα και τον δείκτη της ασύρματης διεπαφής.&lt;/p&gt;
&lt;p lang=&#34;el&#34;&gt; β) Τη δεύτερη φορά χρησιμοποιούμε το αναγνωριστικό εντολής NL80211_CMD_GET_STATION για να λάβουμε την ένταση του σήματος και τον ρυθμό μετάδοσης. Ο λόγος για αυτό είναι ότι οι τιμές της του σήματος και του ρυθμού μετάδοσης έχουν έννοια μόνο σε σχέση με κάποιον σταθμό. Σημειώστε ότι πρέπει να βάλουμε στο μήνυμα και τον δείκτη της διεπαφής που μας ενδιαφέρει χρησιμοποιώντας την nla_put_u32(msg2, NL80211_ATTR_IFINDEX, w-&gt;ifindex).&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;getWifiStatus&lt;/span&gt;(Netlink&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; nl, Wifi&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; w) {
  nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;result1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
  nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;result2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nl_msg&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; msg1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nlmsg_alloc();
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;msg1) {
    fprintf(stderr, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Failed to allocate netlink message.&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;);
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-2&lt;/span&gt;;
  }
  
  genlmsg_put(msg1,
              NL_AUTO_PORT,
              NL_AUTO_SEQ,
              nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;id,
              &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,
              NLM_F_DUMP,
              NL80211_CMD_GET_INTERFACE,
              &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

  nl_send_auto(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;socket, msg1);
  
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;while&lt;/span&gt; (nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;result1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) { nl_recvmsgs(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;socket, nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;cb1); }
  nlmsg_free(msg1);

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (w&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;ifindex &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;; }

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; nl_msg&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; msg2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nlmsg_alloc();

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;msg2) {
    fprintf(stderr, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Failed to allocate netlink message.&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;);
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-2&lt;/span&gt;;
  }
  
  genlmsg_put(msg2,
              NL_AUTO_PORT,
              NL_AUTO_SEQ,
              nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;id,
              &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,
              NLM_F_DUMP,
              NL80211_CMD_GET_STATION,
              &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
              
  nla_put_u32(msg2, NL80211_ATTR_IFINDEX, w&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;ifindex); 
  nl_send_auto(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;socket, msg2); 
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;while&lt;/span&gt; (nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;result2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) { nl_recvmsgs(nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;socket, nl&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;cb2); }
  nlmsg_free(msg2);
  
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;main&#34;&gt;main()&lt;/h2&gt;

&lt;p lang=&#34;en&#34;&gt;Here is our main() function. First, we initialize the communication using the initNl80211 and after that, we continuously call the getWifiStatus() inside a loop, every 1 sec, until the user presses ctrl + c:&lt;/p&gt;
&lt;p lang=&#34;el&#34;&gt;Εδώ βλέπουμε τη main() συνάρτησή μας. Πρώτα, αρχικοποιούμε την επικοινωνία με την initNl80211 και κατόπιν τούτου, καλούμε συνεχώς μέσα σε έναν βρόχο την getWifiStatus(), ανά 1 δευτερόλεπτο, εώς ότου ο χρήστης πατήσει ctrl + c:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;argv) {
  Netlink nl;
  Wifi w;

  signal(SIGINT, ctrl_c_handler);
  
  nl.id &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; initNl80211(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;nl, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;w);
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (nl.id &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {
    fprintf(stderr, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Error initializing netlink 802.11&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;);
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;;
  }

  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;do&lt;/span&gt; {
    getWifiStatus(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;nl, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;w);  
    printf(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Interface: %s | signal: %d dB | txrate: %.1f MBit/s&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;,
           w.ifname, w.signal, (&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;float&lt;/span&gt;)w.txrate&lt;span style=&#34;color: #666666&#34;&gt;/10&lt;/span&gt;);
    sleep(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  } &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;while&lt;/span&gt;(keepRunning);

  printf(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;Exiting gracefully... &amp;quot;&lt;/span&gt;);
  nl_cb_put(nl.cb1);
  nl_cb_put(nl.cb2);
  nl_close(nl.socket);
  nl_socket_free(nl.socket);
  printf(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;OK&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;);
  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
&lt;span lang=&#34;en&#34;&gt;Here is the full code listing:&lt;/span&gt;
&lt;span lang=&#34;el&#34;&gt;Μπορείτε να δείτε τον πλήρη κώδικα εδώ:&lt;/span&gt;
&lt;a href=&#34;https://github.com/Alamot/code-snippets/blob/master/nl80211_info/nl80211_info.c
&#34; target=&#34;_blank&#34;&gt;nl80211_info.c&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>